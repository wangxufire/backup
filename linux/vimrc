set fenc=utf-8
set fencs=utf-8,usc-bon,euc-jp,gb18030,gbk,gb2312,cp93
set fileencodings=utf-8,gbk,cp936,latin-1
"配置字体
set fileformat=unix
set encoding=utf8
set linespace=5
set magic
" 解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" 解决consle输出乱码
"language messages zh_CN.utf-8

"设置无备份文件
set writebackup
set nobackup
set backspace=indent,eol,start

let g:molokai_original = 1
let g:rehash256 = 1
set background=dark

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
"au VimEnter * RainbowParenthesesToggle
"au Syntax * RainbowParenthesesLoadRound
"au Syntax * RainbowParenthesesLoadSquare
"au Syntax * RainbowParenthesesLoadBraces

set laststatus=2
let g:airline_powerline_fonts = 1

filetype on									 "打开文件类型自动检测功能
set guifont=Monaco\ 11       " 字体 && 字号
set t_Co=256
set tabstop=4                " 设置tab键的宽度
set shiftwidth=4             " 换行时行间交错使用4个空格
set autoindent               " 自动对齐
set backspace=2              " 设置退格键可用
set backspace=indent,eol,start
set cindent shiftwidth=4     " 自动缩进4空格
set smartindent              " 智能自动缩进
set ai!                      " 设置自动缩进
set nu!                      " 显示行号
set showmatch               " 显示括号配对情况
set mouse=a                  " 启用鼠标
set ruler                    " 右下角显示光标位置的状态行
set incsearch                " 查找book时，当输入/b时会自动找到
set hlsearch                 " 开启高亮显示结果
set incsearch                " 开启实时搜索功能
set nowrap
set nowrapscan               " 搜索到文件两端时不重新搜索
set nocompatible             " 关闭兼容模式
set vb t_vb=                 " 关闭提示音
"set cursorline              " 突出显示当前行
set hidden                   " 允许在有未保存的修改时切换缓冲区
"set list                     " 显示Tab符，使用一高亮竖线代替
set ruler                    " 打开状态栏标尺
filetype plugin indent on    " 开启插件
filetype plugin on
set nocp
filetype indent on
"set filetype=java

setlocal omnifunc=javacomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete
autocmd FileType java set completefunc=javacomplete#CompleteParamsInf
autocmd Filetype java,javascript,jsp inoremap <buffer>  .  .<C-X><C-O><C-P>
autocmd FileType java inoremap <expr><CR> pumvisible()?"\<C-Y>":"<CR>"

"autocmd FileType java 
set smartindent
set ignorecase smartcase     " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set hlsearch                 " 搜索时高亮显示被找到的文本
"set foldenable               " 开始折叠
"set foldmethod=syntax        " 设置语法折叠
"set foldcolumn=0             " 设置折叠区域的宽度
"setlocal foldlevel=1         " 设置折叠层数为
set foldclose=all             " 设置为自动关闭折叠 
vmap <C-c> "+y               " 选中状态下 Ctrl+c 复制

" 设置当文件被改动时自动载入
set autoread
" quickfix模式
""autocmd FileType c,cpp map <buffer> <leader><space> :w<cr>:make<cr>
"代码补全 
set completeopt=preview,menu 
"共享剪贴板  
set clipboard+=unnamed 

"从系统剪切板中复制，剪切，粘贴
map <F6> "+y
map <F7> "+x
map <F8> "+p

" Ctrl + S            保存文件
map <c-s> <ESC>:w<CR>
imap <c-s> <ESC>:w<CR>a
vmap <c-s> <ESC>:w<CR>

"设置不自动换行，及下方的横向滚动条
set nowrap
set guioptions+=b

"配置主题及语法高亮
syntax enable
syntax on

" TxtBrowser           高亮TXT文本文件
au BufRead,BufNewFile *.txt setlocal ft=txt

set showmatch					"高亮显示匹配的括号

"colorscheme torte
colorscheme koehler
"colorscheme ir_black
"colorscheme molokai
"colorscheme monokai
"colorscheme candy 
"colorscheme vividchalk 
"colorscheme murphy         " 设定配色方案
"colorscheme default
"colorscheme elflord
"colorscheme desert
"colorscheme delek
"colorscheme ron
"colorscheme slate
"colorscheme zellner

" Ctrl + E            在当前行添加C/C++/Java语言的多行注释 [插入模式]
imap <c-e> /*  */<ESC>hhi
"MiniBufExplorer     多个文件切换 可使用鼠标双击相应文件名进行切换
let g:miniBufExplMapWindowNavVim=1
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplMoreThanOne=0 

"可以在buffer的任何地方使用鼠标
set mouse=a
set selection=exclusive
set selectmode=mouse,key

" :Tlist       调用TagList
let Tlist_Show_One_File=0   					"显示多个文件的tags
let Tlist_File_Fold_Auto_Close=1 			"非当前文件，函数列表折叠隐藏
let Tlist_Use_SingleClick=1 					"单击时跳转
let Tlist_GainFocus_On_ToggleOpen=1 	"打开taglist时获得输入焦点
let Tlist_Process_File_Always=1 			"不管taglist窗口是否打开，始终解析文件中的tag
let Tlist_Exit_OnlyWindow=1           "如果Taglist窗口是最后一个窗口则退出Vim
"let Tlist_Use_Right_Window=1          "在右侧窗口中显示
let Tlist_Use_Left_Window=1          "在右侧窗口中显示
let Tlist_File_Fold_Auto_Close=1      "自动折叠
" tl                  打开Taglist [非插入模式]
map tl :Tlist<CR><c-l>

"启动vim时如果存在tags则自动加载
if exists("tags")
	set tags=./tags
endif

"设置WinManager插件
let g:winManagerWindowLayout='FileExplorer|TagList'

let g:NERDTree_title="[NERDTree]" 
let g:winManagerWindowLayout="NERDTree|TagList"  
function! NERDTree_Start()
	exec 'NERDTree'
endfunction
function! NERDTree_IsValid()
	return 1
endfunction
nmap wm :WMToggle<CR>

nmap wm :WMToggle<cr>
map <silent> <F9> :WMToggle<cr> 			"将F9绑定至WinManager,即打开WimManager

set list
set listchars=tab:\|\ 

" ======= 引号 && 括号自动匹配 ======= "

:inoremap ( ()<ESC>i

:inoremap ) <c-r>=ClosePair(')')<CR>

:inoremap { {}<ESC>i

:inoremap } <c-r>=ClosePair('}')<CR>

:inoremap [ []<ESC>i

:inoremap ] <c-r>=ClosePair(']')<CR>

":inoremap < <><ESC>i

":inoremap > <c-r>=ClosePair('>')<CR>

:inoremap " ""<ESC>i

:inoremap ' ''<ESC>i

:inoremap ` ``<ESC>i

function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endf

" MiniBufExplorer     多个文件切换 可使用鼠标双击相应文件名进行切换
let g:miniBufExplMapWindowNavVim=1
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplMoreThanOne=0 

" ======= 编译 && 运行 ======= "

" 编译C源文件
func! CompileGcc()
    exec "w"
    let compilecmd="!gcc -Wall -pedantic -std=c99 "
    let compileflag="-o %<"
    exec compilecmd." % ".compileflag
endfunc

" 编译C++源文件
func! CompileCpp()
    exec "w"
    let compilecmd="!g++ -Wall -pedantic -std=c++98 "
    let compileflag="-o %<"
    exec compilecmd." % ".compileflag
endfunc

" 编译Java源文件
func! CompileJava()
	exec "w"
    exec "!javac %"
endfunc

" 编译Haskell源文件
func! CompileHaskell()
	exec "w"
	let compilecmd="!ghc --make "
	let compileflag="-o %<"
	exec compilecmd." % ".compileflag
endfunc

" 根据文件类型自动选择相应的编译函数
func! CompileCode()
        exec "w"
        if &filetype == "c"
			exec "call CompileGcc()"
        elseif &filetype == "cpp"
			exec "call CompileCpp()"
		elseif &filetype == "java"
			exec "call CompileJava()"
		elseif &filetype == "haskell"
			exec "call CompileHaskell()"
		elseif &filetype == "lua"
			exec "!lua %<.lua"
		elseif &filetype == "perl"
			exec "!perl %<.pl"
        elseif &filetype == "python"
			exec "!python %<.py"
		elseif &filetype == "ruby"
			exec "!ruby %<.rb"
        endif
endfunc

" 运行可执行文件
func! RunResult()
        exec "w"
        if &filetype == "c"
			exec "! %<"
        elseif &filetype == "cpp"
			exec "! %<"
		elseif &filetype == "java"
			exec "!java %<"
		elseif &filetype == "haskell"
			exec "! %<"
		elseif &filetype == "lua"
			exec "!lua %<.lua"
		elseif &filetype == "perl"
			exec "!perl %<.pl"
        elseif &filetype == "python"
			exec "!python %<.py"
		elseif &filetype == "ruby"
			exec "!ruby %<.rb"
        endif
endfunc

" Ctrl + C 一键保存、编译
map <c-c> :call CompileCode()<CR>
imap <c-c> <ESC>:call CompileCode()<CR>
vmap <c-c> <ESC>:call CompileCode()<CR>

" Ctrl + R 一键保存、运行
map <c-r> :call RunResult()<CR>
imap <c-r> <ESC>:call RunResult()<CR>
vmap <c-r> <ESC>:call RunResult()<CR>

"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
	exec "w"
	exec "!g++ % -g -o %<"
	exec "!gdb ./%<"
endfunc

autocmd WinEnter * call s:CloseBlankWin()
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseBlankWin()
	if exists("t:NERDTreeBufName")
		if bufwinnr(t:NERDTreeBufName) != -1
			if winnr("$") == 2
				q
					endif
			endif
		endif
endfunction

"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'sh' 
		call setline(1,"\#########################################################################") 
		call append(line("."), "\# File Name: ".expand("%")) 
		call append(line(".")+1, "\# Author: liyue") 
		call append(line(".")+2, "\# mail: liyue@hd123.com") 
		call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
		call append(line(".")+4, "\#########################################################################") 
		call append(line(".")+5, "\#!/bin/bash") 
		call append(line(".")+6, "") 
	else 
		call setline(1, "/*************************************************************************") 
		call append(line("."), "	> File Name: ".expand("%")) 
		call append(line(".")+1, "	> Author: liyue") 
		call append(line(".")+2, "	> Mail: liyue@hd123.com ") 
		call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
		call append(line(".")+4, " ************************************************************************/") 
		call append(line(".")+5, "")
	endif
	if &filetype == 'cpp'
		call append(line(".")+6, "#include<iostream>")
		call append(line(".")+7, "using namespace std;")
		call append(line(".")+8, "")
	endif
	if &filetype == 'c'
		call append(line(".")+6, "#include<stdio.h>")
		call append(line(".")+7, "")
	endif
		if &filetype == 'java'
			call append(line(".")+6,"public class ".expand("%"))
			call append(line(".")+7,"")
		endif
	"新建文件后，自动定位到文件末尾
	autocmd BufNewFile * normal G
endfunc 

"自动补全
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
":inoremap { {<CR>}<ESC>O
":inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i
function! ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endfunction
filetype plugin indent on 
"打开文件类型检测, 加了这句才可以用智能补全
"set completeopt=longest,menu
